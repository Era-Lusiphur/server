// NOTE: This file is autogenerated!
// If you want to update it or add new settings, use tools/generate_settings.py

#pragma once

#include <unordered_map>
#include <variant>

enum class MainSettings
{
    SERVER_NAME, // (string) The name of the server (not longer than 15 characters)
    SERVER_MESSAGE, // (string) Shown to players on login. Modify this in server_message.txt

    // Content Switches
    ENABLE_COP, // (bool) Enables expansion: Chains of Promathia
    ENABLE_TOAU, // (bool) Enables expansion: Treasure of Aht Urghan
    ENABLE_WOTG, // (bool) Enables expansion: Wings of the Goddess
    ENABLE_ACP, // (bool) Enables mini-expansion: A Crystaline Prophecy
    ENABLE_AMK, // (bool) Enables mini-expansion: A Moogle Kupo d'Etat
    ENABLE_ASA, // (bool) Enables mini-expansion: A Shantotto Ascenscion
    ENABLE_ABYSSEA, // (bool) Enables expansion: Abyssea
    ENABLE_SOA, // (bool) Enables expansion: Seekers of Adoulin
    ENABLE_ROV, // (bool) Enables expansion: Rhapsodies of Vana'diel

    ENABLE_VOIDWATCH, // (bool) Enables Voidwatch
    ENABLE_VOIDWALKER, // (bool) Enables Voidwalker

    ENABLE_FIELD_MANUALS, // (bool) Enables Fields of Valor Books
    ENABLE_GROUNDS_TOMES, // (bool) Enables Grounds of Valor Books
    ENABLE_SURVIVAL_GUIDE, // (bool) Enables Survival Guides

    REGIME_WAIT, // (bool) Make people wait till 00:00 game time as in retail. If it's false there is no wait time.
    FOV_REWARD_ALLIANCE, // (bool) Allow Fields of Valor rewards while being a member of an alliance.
    GOV_REWARD_ALLIANCE, // (bool) Allow Grounds of Valor rewards while being a member of an alliance.

    ENABLE_ROE, // (bool) Enables Records of Eminence
    ENABLE_ROE_TIMED, // (bool) Enable 4-hour timed records
    ENABLE_EXCHANGE_LIMIT, // (bool) Enable Maximum limit of sparks spent per Week

    WEEKLY_EXCHANGE_LIMIT, // (uint) Maximum amount of sparks/accolades that can be spent per week

    // Currency Caps (Change at your own risk!)
    CAP_CURRENCY_ACCOLADES, // (uint) Maximum accolades characters may hold at one time
    CAP_CURRENCY_BALLISTA, // (uint) Maximum ballista currency characters may hold at one time
    CAP_CURRENCY_SPARKS, // (uint) Maximum sparks characters may hold at one time
    CAP_CURRENCY_VALOR, // (uint) Maximum valor characters may hold at one time

    // Magian Trials
    ENABLE_MAGIAN_TRIALS, // (bool) Enables Magian Trials
    MAGIAN_TRIALS_MOBKILL_MULTIPLIER, // (float) TODO: Multiplier applied to...
    MAGIAN_TRIALS_TRADE_MULTIPLIER, // (float) TODO: Multiplier applied to...

    // Treasure Caskets
    // Retail droprate = 0.1 (10%) with no other effects active
    // Set to 0 to disable caskets.
    // Max is clamped to 1.0 (100%)
    CASKET_DROP_RATE, // (float) Drop rate for caskets

    // Character Config
    INITIAL_LEVEL_CAP, // (uint) The initial level cap for new players. There seems to be a hardcap of 255.
    MAX_LEVEL, // (uint) Level max of the server lowers the attainable cap by disabling Limit Break quests.
    NORMAL_MOB_MAX_LEVEL_RANGE_MIN, // (uint) Lower Bound of Max Level Range for Normal Mobs (0 = Uncapped)
    NORMAL_MOB_MAX_LEVEL_RANGE_MAX, // (uint) Upper Bound of Max Level Range for Normal Mobs (0 = Uncapped)
    START_GIL, // (uint) Amount of gil given to newly created characters.
    START_INVENTORY, // (uint) Starting inventory and satchel size. Ignores values < 30. Do not set above 80!
    NEW_CHARACTER_CUTSCENE, // (bool) Enable opening cutscenes for new characters.
    SUBJOB_QUEST_LEVEL, // (uint) Minimum level to accept either subjob quest. Set to 0 to start the game with subjobs unlocked.
    ADVANCED_JOB_LEVEL, // (uint) Minimum level to accept advanced job quests. Set to 0 to start the game with advanced jobs.
    ALL_MAPS, // (bool) Give starting characters all the maps.
    UNLOCK_OUTPOST_WARPS, // (bool) Give starting characters all outpost warps (not including Tu'Lia and Tavnazia).
    UNLOCK_OUTPOST_WARPS_SEA_SKY, // (bool) Give starting characters outpost warps for Tu'Lia and Tavnazia.

    // Rate Modifiers
    SHOP_PRICE, // (float) Multiplies prices in NPC shops.
    GIL_RATE, // (float) Multiplies gil earned from quests. Won't always display in game.
    BAYLD_RATE, // (float) Multiples bayld earned from quests.
    EXP_RATE, // (float) Multiplies exp from script (except FoV/GoV).
    BOOK_EXP_RATE, // (float) Multiplies exp from FoV/GoV book pages.
    TABS_RATE, // (float) Multiplies tabs earned from fov.
    ROE_EXP_RATE, // (float) Multiplies exp earned from records of eminence.
    SPARKS_RATE, // (float) Multiplies sparks earned from records of eminence.
    CURE_POWER, // (float) Multiplies amount healed from Healing Magic
    ELEMENTAL_POWER, // (float) Multiplies damage dealt by Elemental and non-drain Dark Magic.
    DIVINE_POWER, // (float) Multiplies damage dealt by Divine Magic.
    NINJUTSU_POWER, // (float) Multiplies damage dealt by Ninjutsu Magic.
    BLUE_POWER, // (float) Multiplies damage dealt by Blue Magic.
    DARK_POWER, // (float) Multiplies amount drained by Dark Magic.
    ITEM_POWER, // (float) Multiplies the effect of items such as Potions and Ethers.

    WEAPON_SKILL_POWER, // (float) Multiplies damage dealt by Weapon Skills.
    USE_ADOULIN_WEAPON_SKILL_CHANGES, // (bool) Use Adoulin weapon skill damage calculations.

    // Trusts
    ENABLE_TRUST_CASTING, // (bool) Enable the casting of Trust spells
    ENABLE_TRUST_QUESTS, // (bool) Enable accepting and completion of the various Trust acquisition quests.

    HARVESTING_BREAK_CHANCE, // (uint) % chance for the sickle to break during harvesting. Set between 0 and 100.
    EXCAVATION_BREAK_CHANCE, // (uint) % chance for the pickaxe to break during excavation. Set between 0 and 100.
    LOGGING_BREAK_CHANCE, // (uint) % chance for the hatchet to break during logging. Set between 0 and 100.
    MINING_BREAK_CHANCE, // (uint) % chance for the pickaxe to break during mining. Set between 0 and 100.
    HARVESTING_RATE, // (uint) % chance to recieve an item from haresting. Set between 0 and 100.
    EXCAVATION_RATE, // (uint) % chance to recieve an item from excavation. Set between 0 and 100.
    LOGGING_RATE, // (uint) % chance to recieve an item from logging. Set between 0 and 100.
    MINING_RATE, // (uint) % chance to recieve an item from mining. Set between 0 and 100.
    DIGGING_RATE, // (uint) % chance to receive an item from chocbo digging during favorable weather. Set between 0 and 100.

    HEALING_TP_REDUCTION, // (uint) Reduction in TP for each healing tick.

    // SE implemented coffer/chest illusion time in order to prevent coffer farming. No-one in the same area can open a chest or coffer for loot (gil, gems & items)
    // till a random time between MIN_ILLSION_TIME and MAX_ILLUSION_TIME. During this time players can loot keyitem and item related to quests (AF, maps... etc.)
    COFFER_MAX_ILLUSION_TIME, // (uint) TODO: Commen (1 hour)
    COFFER_MIN_ILLUSION_TIME, // (uint) TODO: Commen (30 minutes)
    CHEST_MAX_ILLUSION_TIME, // (uint) TODO: Commen (1 hour)
    CHEST_MIN_ILLUSION_TIME, // (uint) TODO: Commen (30 minutes)

};

enum class SqlSettings
{
    HOST, // (string) The IP Address of the host machine
    PORT, // (uint) The Port
    LOGIN, // (string) The Login
    PASSWORD, // (string) The Password
    DATABASE, // (string) The Database

};

enum class LoggingSettings
{
    TIMESTAMP_FORMAT, // (string) Timestamp format
    ENABLE_STANDARD, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_STATUS, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_INFO, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_NOTICE, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_WARN, // (bool) Enable standard logging messages (ShowStandard(...))
    ENABLE_DEBUG, // (bool) Enable debug logging messages (ShowDebug(...))
    ENABLE_ERROR, // (bool) Enable x logging messages
    ENABLE_FATAL_ERROR, // (bool) Enable x logging messages
    ENABLE_SQL, // (bool) Enable x logging messages
    ENABLE_LUA, // (bool) Enable x logging messages
    ENABLE_NAVMESH, // (bool) Enable x logging messages
    ENABLE_ACTION, // (bool) Enable x logging messages
    ENABLE_EXPLOIT, // (bool) Enable x logging messages

};

enum class LoginSettings
{
    DATA_IP, // (string) Data IP
    DATA_PORT, // (uint) Data Port
    VIEW_IP, // (string) View IP
    VIEW_PORT, // (uint) View Port
    AUTH_IP, // (string) Auth IP
    AUTH_PORT, // (uint) Auth Port

    LOG_USER_IP, // (bool) Logging of user IP address to database
    ACCOUNT_CREATION, // (bool) Allow account creation via the loader

};

enum class MaintenanceSettings
{
    MAINT_MODE, // (bool) False: Normal operation. True: only GM characters allowed online & no new character creation

};

enum class MapSettings
{
    ENABLED, // (bool) Whether or not logging is on

};

enum class SearchSettings
{
    ENABLED, // (bool) Whether or not logging is on
    PORT, // (uint) Search server port

};

enum class WorldSettings
{
    ENABLED, // (bool) Whether or not logging is on

};

enum class ZmqSettings
{
    IP, // (string) The IP of the machine ZMQ operates on. THIS SHOULD BE YOUR LOCAL MACHINE!
    PORT, // (uint) The port ZMQ operates on (inter-process messaging)

};

enum class VersionSettings
{
    CLIENT_VER, // (string) Expected Client version (wrong version cannot log in)

    // WE STRONGLY ADVISE AGAINST LOCKING THE SERVER TO OLDER VERSIONS. IT IS A UNIVERSALLY BAD IDEA.
    // 0 - disabled (every version allowed)
    // 1 - enabled - strict (only exact CLIENT_VER allowed)
    // 2 - enabled - greater than or equal  (matching or greater than CLIENT_VER allowed, default)
    VER_LOCK, // (uint) Version lock scheme

};

enum class TrustsSettings
{
    ENABLE_TRUST_CASTING, // (bool) 
    ENABLE_TRUST_QUESTS, // (bool) 
};

using variant_settings_t = std::variant<
   MainSettings,
   SqlSettings,
   LoggingSettings,
   LoginSettings,
   MaintenanceSettings,
   MapSettings,
   SearchSettings,
   WorldSettings,
   ZmqSettings,
   VersionSettings,
   TrustsSettings
>;

std::unordered_map<std::string, variant_settings_t>* get_variant_settings_lookup();

void populate_settings_lookup();

